--- ../dftd3.3.1.1/dftd3.f	2016-01-06 15:07:52.000000000 -0500
+++ dftd3.f	2016-04-06 18:22:59.000000000 -0400
@@ -271,6 +271,8 @@
       if(index(ftmp,'-old')    .ne.0) version=2
       if(index(ftmp,'-zero')   .ne.0) version=3
       if(index(ftmp,'-bj')     .ne.0) version=4
+      if(index(ftmp,'-zerom')  .ne.0) version=5
+      if(index(ftmp,'-bjm')    .ne.0) version=6
       if(index(ftmp,'-min')    .ne.0) then
         minc6=.true.
         j=0
@@ -414,13 +416,16 @@
       write(*,*)'J. Comput. Chem. 32 (2011), 1456-1465'
       write(*,*)'For DFT-D2 the reference is'
       write(*,*)'S. Grimme, J. Comput. Chem., 27 (2006), 1787-1799'
+      write(*,*)'For DFT-D3M or DFT-D3M(BJ) the reference is'
+      write(*,*)'D.G.A. Smith, L.A. Burns, K. Patkowski, and '
+      write(*,*)'C.D. Sherrill, J. Phys. Chem. Lett. xx xx xxx'
       write(*,*)
       write(*,*)' files read :     '
       write(*,*)trim(etmp)       
       if(.not.ex)write(*,*)trim(dtmp)       
       endif
 
-      if(version.lt.2.or.version.gt.4)stop 'inacceptable version number'
+      if(version.lt.2.or.version.gt.6)stop 'inacceptable version number'
 
 CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 C all calculations start here
@@ -483,7 +488,9 @@
           c8 =r2r4(iz(i))**2*3.0d0*c6     
           c10=(49.0d0/40.0d0)*c8**2/c6
           dum=0.5*autoang*r0ab(z,z)
-          if(version.eq.4)dum=rs6*0.5*autoang*sqrt(c8/c6)
+          if((version.eq.4).or.(version.eq.6))then
+            dum=rs6*0.5*autoang*sqrt(c8/c6)
+          endif
           atmp=' '
           if(fix(i)) then
            atmp='f'
@@ -640,8 +647,12 @@
       if (echo) then
       if(version.lt.4)then
       write(*,'(/10x,'' DFT-D V'',i1)') version       
-      else
+      elseif(version.eq.4)then
       write(*,'(/10x,'' DFT-D V3(BJ)'')') 
+      elseif(version.eq.5)then
+      write(*,'(/10x,'' DFT-D V3 M'')') 
+      elseif(version.eq.6)then
+      write(*,'(/10x,'' DFT-D V3 M(BJ)'')') 
       endif
       write(*,'('' DF '',a50)') func          
       write(*,'('' parameters'')') 
@@ -658,13 +669,22 @@
          write(*,'('' alpha8   :'',f10.4)') alp8           
          write(*,'('' k1-k3    :'',3f10.4)') k1,k2,k3     
       endif
-      if(version.eq.4)then
+      if((version.eq.4).or.(version.eq.6))then
          write(*,'('' s6       :'',f10.4)') s6            
          write(*,'('' s8       :'',f10.4)') s18           
          write(*,'('' a1       :'',f10.4)') rs6           
          write(*,'('' a2       :'',f10.4)') rs18          
          write(*,'('' k1-k3    :'',3f10.4)') k1,k2,k3     
       endif
+      if(version.eq.5)then
+         write(*,'('' s6       :'',f10.4)') s6            
+         write(*,'('' s8       :'',f10.4)') s18           
+         write(*,'('' rs6      :'',f10.4)') rs6  
+         write(*,'('' beta     :'',f10.4)') rs18          
+         write(*,'('' alpha6   :'',f10.4)') alp6        
+         write(*,'('' alpha8   :'',f10.4)') alp8           
+         write(*,'('' k1-k3    :'',3f10.4)') k1,k2,k3     
+      endif
         write(*,'('' Cutoff   :'',f10.4,'' a.u.'')') sqrt(rthr) !*autoang
         write(*,'('' CN-Cutoff:'',f10.4,'' a.u.'')')sqrt(cn_thr)!*autoang
 !      if (pbc) then
@@ -879,6 +899,8 @@
       write(*,*) '-old (DFT-D2)'         
       write(*,*) '-zero (DFT-D3 original zero-damping)' 
       write(*,*) '-bj   (DFT-D3 with Becke-Johnson finite-damping)' 
+      write(*,*) '-zerom (r DFT-D3 original zero-damping)' 
+      write(*,*) '-bjm   (r DFT-D3 with Becke-Johnson finite-damping)' 
       write(*,*) '-tz (use special parameters for TZ-type calculations)'
       write(*,*) 'variable parameters can be read from <current-director
      .y>/.dftd3par.local'
@@ -900,6 +922,92 @@
       logical TZ
 c double hybrid values revised according to procedure in the GMTKN30 paper
 
+      if(version.eq.6)then
+      s6  =1.0d0
+      alp =14.0d0
+c BJ damping with parameters from ...
+      select case (func)
+        case ("b2-plyp")
+             rs6 =0.486434
+             s18 =0.672820
+             rs18=3.656466
+             s6  =0.640000
+        case ("b3-lyp")
+             rs6 =0.278672
+             s18 =1.466677
+             rs18=4.606311
+        case ("b97-d")
+             rs6 =0.240184
+             s18 =1.206988
+             rs18=3.864426
+        case ("b-lyp")
+             rs6 =0.448486
+             s18 =1.875007
+             rs18=3.610679
+        case ("b-p")
+             rs6 =0.821850
+             s18 =3.140281
+             rs18=2.728151
+        case ("pbe")
+             rs6 =0.012092
+             s18 =0.358940
+             rs18=5.938951
+        case ("pbe0")
+             rs6 =0.007912
+             s18 =0.528823
+             rs18=6.162326
+        case ("lc-wpbe")
+             rs6 =0.563761
+             s18 =0.906564
+             rs18=3.593680
+        case DEFAULT
+              call stoprun( 'functional name unknown' )
+      end select
+      endif
+
+      if(version.eq.5)then
+      s6  =1.0d0
+      alp =14.0d0
+c zero damping with parameters from ...
+      select case (func)
+        case ("b2-plyp")
+             rs6 =1.313134
+             s18 =0.717543
+             rs18=0.016035
+             s6  =0.640000
+        case ("b3-lyp")
+             rs6 =1.338153
+             s18 =1.532981
+             rs18=0.013988
+        case ("b97-d")
+             rs6 =1.151808
+             s18 =1.020078
+             rs18=0.035964
+        case ("b-lyp")
+             rs6 =1.279637
+             s18 =1.841686
+             rs18=0.014370
+        case ("b-p")
+             rs6 =1.233460
+             s18 =1.945174
+             rs18=0.000000
+        case ("pbe")
+             rs6 =2.340218
+             s18 =0.000000
+             rs18=0.129434
+        case ("pbe0")
+             rs6 =2.077949
+             s18 =0.000081
+             rs18=0.116755
+        case ("lc-wpbe")
+             rs6 =1.366361
+             s18 =1.280619
+             rs18=0.003160
+        case DEFAULT
+              call stoprun( 'functional name unknown' )
+      end select
+      endif
+
 c DFT-D3 with Becke-Johnson finite-damping, variant 2 with their radii 
 c SE: Alp is only used in 3-body calculations
       if(version.eq.4)then
@@ -1515,12 +1623,22 @@
 CTHR        
             if(r2.gt.rthr) cycle
             r =sqrt(r2)
-            rr=r0ab(iz(jat),iz(iat))/r
+            tmp2=r0ab(iz(jat),iz(iat))
+            rr=tmp2/r
 c damping
-            tmp=rs6*rr   
-            damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
-            tmp=rs8*rr     
-            damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+            if(version.eq.3)then
+C DFT-D3 zero-damp
+              tmp=rs6*rr   
+              damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
+              tmp=rs8*rr     
+              damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+            else
+C DFT-D3M zero-damp
+              tmp=(r/(rs6*tmp2))+rs8*tmp2
+              damp6 =1.d0/( 1.d0+6.d0*tmp**(-alp6) )
+              tmp=(r/tmp2)+rs8*tmp2
+              damp8 =1.d0/( 1.d0+6.d0*tmp**(-alp8) )
+            endif
 c get C6
             call getc6(maxc,max_elem,c6ab,mxc,iz(iat),iz(jat),
      .                                    cn(iat),cn(jat),c6)
@@ -1531,12 +1649,12 @@
             c8 =3.0d0*c6*r2r4(iz(iat))*r2r4(iz(jat))
 
 C DFT-D3 zero-damp
-            if(version.eq.3)then
+            if((version.eq.3).or.(version.eq.5))then
                e6=e6+c6*damp6/r6
                e8=e8+c8*damp8/r8
             endif
-C DFT-D3(BJ)          
-            if(version.eq.4)then
+C DFT-D3(BJ) or DFT-D3M(BJ)          
+            if((version.eq.4).or.(version.eq.6))then
 c use BJ radius
                tmp=sqrt(c8/c6)              
                e6=e6+  c6/(r6+(a1*tmp+a2)**6)
@@ -1685,10 +1803,19 @@
             rr=R0/r
             r6=r2**3       
 
-            tmp=rs6*rr   
-            damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
-            tmp=rs8*rr     
-            damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+            if(version.eq.3)then
+C DFT-D3 zero-damp
+              tmp=rs6*rr   
+              damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
+              tmp=rs8*rr     
+              damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+            else
+C DFT-D3M zero-damp
+              tmp=(r/(rs6*R0))+rs8*R0
+              damp6 =1.d0/( 1.d0+6.d0*tmp**(-alp6) )
+              tmp=(r/R0)+rs8*R0
+              damp8 =1.d0/( 1.d0+6.d0*tmp**(-alp8) )
+            endif
 
             if (version.eq.2)then
               c6=c6ab(iz(jat),iz(iat),1,1,1)
@@ -1700,7 +1827,7 @@
      .                                      cn(iat),cn(jat),c6)
             endif
 
-            if(version.eq.3)then
+            if((version.eq.3).or.(version.eq.5))then
             e6 =s6*autokcal*c6*damp6/r6
             r8 =r6*r2
             r42=r2r4(iz(iat))*r2r4(iz(jat))
@@ -1708,7 +1835,7 @@
             e8 =s18*autokcal*c8*damp8/r8
             endif
 
-            if(version.eq.4)then
+            if((version.eq.4).or.(version.eq.6))then
             r42=r2r4(iz(iat))*r2r4(iz(jat))
             c8 =3.0d0*c6*r42
 c use BJ radius
@@ -1986,7 +2113,7 @@
 
 c 333333333333333333333333333333333333333333333333333333333333333333333333333
 c zero damping
-      elseif (version.eq.3) then
+      elseif ((version.eq.3).or.(version.eq.5)) then
 
       if(echo)write(*,*) 'doing analytical gradient O(N^2) ...'
       call ncoord(n,rcov,iz,xyz,cn,cn_thr)
@@ -2028,31 +2155,48 @@
 
 !
 !  Calculates damping functions:
-          t6 = (r/(rs6*R0))**(-alp6)
-          damp6 =1.d0/( 1.d0+6.d0*t6 )
-          t8 = (r/(rs8*R0))**(-alp8)
-          damp8 =1.d0/( 1.d0+6.d0*t8 )
-
-          tmp1=s6*6.d0*damp6*C6/r7
-          tmp2=s8*6.d0*C6*r42*damp8/r9
-          drij(linij)=drij(linij)-tmp1  ! d(r^(-6))/d(r_ij)
+          if (version.eq.3) then
+            t6 = (r/(rs6*R0))**(-alp6)
+            damp6 =1.d0/( 1.d0+6.d0*t6 )
+            t8 = (r/(rs8*R0))**(-alp8)
+            damp8 =1.d0/( 1.d0+6.d0*t8 )
+
+            tmp1=s6*6.d0*damp6*C6/r7
+            tmp2=s8*6.d0*C6*r42*damp8/r9
+            drij(linij)=drij(linij)-tmp1  ! d(r^(-6))/d(r_ij)
      .                -4.d0*tmp2
 
 
-          drij(linij)=drij(linij)
+            drij(linij)=drij(linij)
      .        +tmp1*alp6*t6*damp6        !d(f_dmp)/d(r_ij)
      .        +3.d0*tmp2*alp8*t8*damp8
+          else ! version.eq.5
+            t6 = (r/(rs6*R0)+R0*rs8)**(-alp6)
+            damp6 =1.d0/( 1.d0+6.d0*t6 )
+            t8 = (r/R0+R0*rs8)**(-alp8)
+            damp8 =1.d0/( 1.d0+6.d0*t8 )
+
+            tmp1=s6*6.d0*damp6*C6/r7
+            tmp2=s8*6.d0*C6*r42*damp8/r9
+            drij(linij)=drij(linij)-tmp1  ! d(r^(-6))/d(r_ij)
+     .                -4.d0*tmp2
 
 
-          if ((.not.noabc).and.(r2.lt.abcthr)) then
+            drij(linij)=drij(linij)
+     .        +tmp1*alp6*t6*damp6*r/(r+rs6*R0*R0*rs8)  !d(f_dmp)/d(r_ij)
+     .        +3.d0*tmp2*alp8*t8*damp8*r/(r+R0*R0*rs8)
+          end if
+
+
+            if ((.not.noabc).and.(r2.lt.abcthr)) then
 !          if (.not.noabc) then
-            abccalc(linij)=.TRUE.
-            dc6ij(iat,jat)=dc6iji
-            dc6ij(jat,iat)=dc6ijj
-            c6abc(linij)=c6
-            r2abc(linij)=r2
-            r3abc(linij)=(r/R0)**(1.0/3.0)
-          endif !noabc
+              abccalc(linij)=.TRUE.
+              dc6ij(iat,jat)=dc6iji
+              dc6ij(jat,iat)=dc6ijj
+              c6abc(linij)=c6
+              r2abc(linij)=r2
+              r3abc(linij)=(r/R0)**(1.0/3.0)
+            endif !noabc
           
           dc6_rest=s6/r6*damp6+3.d0*s8*r42/r8*damp8
 
@@ -2076,7 +2220,7 @@
 
 c BJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJBJ 
 c Becke-Johnson finite damping 
-      elseif (version.eq.4) then 
+      elseif ((version.eq.4).or.(version.eq.6)) then
       a1 =rs6
       a2 =rs8
       s8 =s18
@@ -4516,7 +4660,7 @@
       logical noabc
  
       integer iat,jat,kat
-      real*8 r,r2,r6,r8,tmp,dx,dy,dz,c6,c8,c10,ang,rav
+      real*8 r,r2,r6,r8,tmp,dx,dy,dz,c6,c8,c10,ang,rav,R0
       real*8 damp6,damp8,damp10,rr,thr,c9,r42,c12,r10,c14
       real*8 cn(n),rxyz(3),dxyz(3)
       real*8 r2ab(n*n),cc6ab(n*n),dmp(n*n),d2(3),t1,t2,t3,tau(3)
@@ -4591,7 +4735,7 @@
       
       
 
-      else if (version.eq.3) then
+      else if ((version.eq.3).or.(version.eq.5)) then
 C DFT-D3(zero-damping)
 
         call pbcncoord(n,rcov,iz,xyz,cn,lat,rep_cn,crit_cn)
@@ -4620,12 +4764,22 @@
 
               if(r2.gt.rthr) cycle
               r =sqrt(r2)
-              rr=r0ab(iz(jat),iz(iat))/r
+              R0=r0ab(iz(jat),iz(iat))
+              rr=R0/r
 c damping
-              tmp=rs6*rr   
-              damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
-              tmp=rs8*rr     
-              damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+              if(version.eq.3)then
+C DFT-D3 zero-damp
+                tmp=rs6*rr   
+                damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
+                tmp=rs8*rr     
+                damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+              else
+C DFT-D3M zero-damp
+                tmp=(r/(rs6*R0))+rs8*R0
+                damp6 =1.d0/( 1.d0+6.d0*tmp**(-alp6) )
+                tmp=(r/R0)+rs8*R0
+                damp8 =1.d0/( 1.d0+6.d0*tmp**(-alp8) )
+              endif
 
 
               r6=r2**3      
@@ -4668,12 +4822,22 @@
 c cutoff
             if(r2.gt.rthr) cycle
             r =sqrt(r2)
-            rr=r0ab(iz(jat),iz(iat))/r
-c damping
-            tmp=rs6*rr   
-            damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
-            tmp=rs8*rr     
-            damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+            R0=r0ab(iz(jat),iz(iat))
+            rr=R0/r
+
+            if(version.eq.3)then
+C DFT-D3 zero-damp
+              tmp=rs6*rr   
+              damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
+              tmp=rs8*rr     
+              damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+            else
+C DFT-D3M zero-damp
+              tmp=(r/(rs6*R0))+rs8*R0
+              damp6 =1.d0/( 1.d0+6.d0*tmp**(-alp6) )
+              tmp=(r/R0)+rs8*R0
+              damp8 =1.d0/( 1.d0+6.d0*tmp**(-alp8) )
+            endif
 
 
             r6=r2**3      
@@ -4692,7 +4856,7 @@
           enddo !taux
         enddo !iat
 !      write(*,*)'counter(edisp): ',counter
-      else if (version.eq.4) then
+      else if((version.eq.4).or.(version.eq.6)) then
 
 
 C DFT-D3(BJ-damping)
@@ -5435,7 +5599,7 @@
       goto 999
       endif !version==2
 
-      if (version.eq.3) then
+      if ((version.eq.3).or.(version.eq.5)) then
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !          
 !    begin ZERO DAMPING GRADIENT         
@@ -5497,6 +5661,8 @@
 
 !
 !  Calculates damping functions:
+C DGAS Edit
+        if (version.eq.3) then 
           t6 = (r/(rs6*R0))**(-alp6)
           damp6 =1.d0/( 1.d0+6.d0*t6 )
           t8 = (r/(rs8*R0))**(-alp8)
@@ -5512,6 +5678,24 @@
      .     iat))
      .        +(s6*C6/r7*6.d0*alp6*t6*damp6*damp6     !d(f_dmp)/d(tau)
      .        +s8*C6*r42/r9*18.d0*alp8*t8*damp8*damp8)*0.5d0
+        else !version.eq.5
+          t6 = (r/(rs6*R0)+R0*rs8)**(-alp6)
+          damp6 =1.d0/( 1.d0+6.d0*t6 )
+          t8 = (r/(R0)+R0*rs8)**(-alp8)
+          damp8 =1.d0/( 1.d0+6.d0*t8 )
+
+          tmp1=s6*6.d0*damp6*C6/r7
+          tmp2=s8*6.d0*C6*r42*damp8/r9
+          drij(tauz,tauy,taux,lin(iat,iat))=drij(tauz,tauy,taux,lin(iat,
+     .     iat)) - (tmp1  ! d(r^(-6))/d(r_ij)
+     .                +4.d0*tmp2)*0.5d0
+      
+      
+          drij(tauz,tauy,taux,lin(iat,iat))=drij(tauz,tauy,taux,lin(iat,
+     .     iat))
+     .      +(tmp1*alp6*t6*damp6*r/(r+rs6*R0*R0*rs8)  !d(f_dmp)/d(r_ij)
+     .      +3.d0*tmp2*alp8*t8*damp8*r/(r+R0*R0*rs8))*0.5d0
+        endif
 !
 !      in dC6_rest all terms BUT C6-term is saved for the kat-loop
 !          
@@ -5574,6 +5758,7 @@
   
 !
 !  Calculates damping functions:
+            if (version.eq.3) then
               t6 = (r/(rs6*R0))**(-alp6)
               damp6 =1.d0/( 1.d0+6.d0*t6 )
               t8 = (r/(rs8*R0))**(-alp8)
@@ -5588,6 +5773,24 @@
      .           linij)
      .          +s6*C6/r7*6.d0*alp6*t6*damp6*damp6     !d(f_dmp)/d(r_ij)
      .          +s8*C6*r42/r9*18.d0*alp8*t8*damp8*damp8
+            else !version.eq.5
+              t6 = (r/(rs6*R0)+R0*rs8)**(-alp6)
+              damp6 =1.d0/( 1.d0+6.d0*t6 )
+              t8 = (r/(R0)+R0*rs8)**(-alp8)
+              damp8 =1.d0/( 1.d0+6.d0*t8 )
+
+              tmp1=s6*6.d0*damp6*C6/r7
+              tmp2=s8*6.d0*C6*r42*damp8/r9
+              drij(tauz,tauy,taux,linij)=drij(tauz,tauy,taux,
+     .           linij) - (tmp1  ! d(r^(-6))/d(r_ij)
+     .                    +4.d0*tmp2)
+      
+      
+              drij(tauz,tauy,taux,linij)=drij(tauz,tauy,taux,
+     .           linij)
+     .          +(tmp1*alp6*t6*damp6*r/(r+rs6*R0*R0*rs8)  !d(f_dmp)/d(r_ij)
+     .          +3.d0*tmp2*alp8*t8*damp8*r/(r+R0*R0*rs8))
+            endif
 !
 !      in dC6_rest all terms BUT C6-term is saved for the kat-loop
 !          
@@ -5612,7 +5815,7 @@
 
         enddo !iat
 
-      elseif (version.eq.4)  then
+      elseif ((version.eq.4).or.(version.eq.6)) then
 
 
 
@@ -6611,10 +6814,17 @@
             rr=R0/r
             r6=r2**3       
 
-            tmp=rs6*rr   
-            damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
-            tmp=rs8*rr     
-            damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+            if(version.eq.3)then
+              tmp=rs6*rr   
+              damp6 =1.d0/( 1.d0+6.d0*tmp**alp6 )
+              tmp=rs8*rr     
+              damp8 =1.d0/( 1.d0+6.d0*tmp**alp8 )
+            else
+              tmp=(r/(R0*rs6)+R0*rs8)**(-alp6) 
+              damp6 =1.d0/( 1.d0+6.d0*tmp )
+              tmp=(r/(R0)+R0*rs8)**(-alp8) 
+              damp8 =1.d0/( 1.d0+6.d0*tmp )
+            endif
 
             if (version.eq.2)then
               c6=c6ab(iz(jat),iz(iat),1,1,1)
@@ -6630,7 +6840,7 @@
      .                                      cn(iat),cn(jat),c6)
             endif
 
-            if(version.eq.3)then
+            if((version.eq.3).or.(version.eq.5))then
               r8 =r6*r2
               r42=r2r4(iz(iat))*r2r4(iz(jat))
               c8 =3.0d0*c6*r42
@@ -6643,7 +6853,7 @@
               endif
             endif
 
-            if(version.eq.4)then
+            if((version.eq.4).or.(version.eq.6))then
               r42=r2r4(iz(iat))*r2r4(iz(jat))
               c8 =3.0d0*c6*r42
 c use BJ radius
